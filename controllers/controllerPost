// importo il file data_posts
const posts = require('../data/posts');

// index => funzione
function index(req, res) {

    // il post filtrato === a quello originale
    let filteredPosts = posts;

    // Verifico se è stato passato un parametro "tag" nella query
    if (req.query.tag) {

        // filtro i post che contengono il tag passato
        filteredPosts = posts.filter(

            post => post.tags.includes(req.query.tag)

        );

    }

    // restituisco l'array in formato json
    res.json(filteredPosts);

}


// show => funzione
function show(req, res) {

    // interpreta la stinga come numero decimale
    const id = parseInt(req.params.id, 10);

    // ricerca dell'ID specificato
    const post = posts.find(post => post.id === id);

    // se il post non venisse trovato restituisco error 404
    if (!post) {

        return res.status(404).json({ error: 'Post non trovato' });

    }

    // Se il post esiste, restituisce i dettagli del post in formato JSON
    res.json(post);

}


// STORE => fuzione
function store(req, res) {

    // controllo l'array prima dell'aggiunta
    // console.log("Array prima dell'aggiunta", posts);

    // Controllo che tutti i campi richiesti siano presenti
    if (!req.body.title || !req.body.content) {

        return res.status(400).json({ error: 'Dati mancanti' });

    }


    // Creo un nuovo id incrementando l'ultimo nell'array
    const lastPost = posts[posts.length - 1];
    const newId = lastPost ? lastPost.id + 1 : 1;

    // Creazione nuovo oggetto (ID nuovo sarà ultimo ID + 1)
    const newPost = {

        // genera un ID incrementale
        id: newId,
        title: req.body.title,
        slug: req.body.slug,
        content: req.body.content,
        image: req.body.image,
        tags: req.body.tags,

    };

    // Aggiungo il nuovo post all'array dei post
    posts.push(newPost);

    // Stampo l'array dei post aggiornato nel terminale
    console.log(posts);

    // restituisco lo status corretto e il post appena creato
    res.status(201);
    res.json(newPost);

}


// UPDATE => funzione
function update(req, res) {

    // Ottengo l'ID del post che voglio aggiornare
    const id = parseInt(req.params.id, 10);

    // Trovo il post con l'ID corrispondente
    const post = posts.find(post => post.id === id);

    // se il post non esiste, restituisco errore 404
    if (!post) {

        return res.status(404).json({

            error: 'Post non trovato'

        });

    }

    // res.send('Lista dei post ' + req.params.id);

    // Modifico il post con i nuovi dati
    post.title = req.body.title;
    post.slug = req.body.slug;
    post.content = req.body.content;
    post.tags = req.body.tags;

    // stampo l'array dei post aggiornato
    console.log('Lista dei post aggiornata:', posts);

    // Restituisco il post aggiornato al client
    res.json(post);

}


// DELETE => funzione
function destroy(req, res) {

    // Estraggo l'ID del post dalla richiesta (params) e lo converte in un intero
    const id = parseInt(req.params.id, 10);

    // Trovo l'indice del post da eliminare nell'array dei post
    const postIndex = posts.findIndex(post => post.id === id);

    // Se il post non venisse trovato restituisce error 404
    if (postIndex === -1) {

        return res.status(404).json({ error: "Post non trovato" });

    }

    // Rimuovo il post dall'array dei post usando splice
    posts.splice(postIndex, 1);

    // Rispondo con stato 204 (No Content)
    res.sendStatus(204);

    // Stampo la lista aggiornata dei post nel terminale per visualizzare la modifica
    console.log('Lista dei post aggiornata:', posts);

    // Rispondo con stato 204 (No Content) per indicare che l'eliminazione è stata completata senza errori
    res.sendStatus(204);

    // Stampo la lista aggiornata dei post nel terminale
    console.log('Lista dei post aggiornata:', posts);

}


// esporto tutto
export { index, show, store, update, destroy };